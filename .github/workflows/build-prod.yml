name: Build and release prod apps

on:
  push:
    tags:
      - '**'

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-13, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: 21

      - name: Prepare for app notarization
        if: startsWith(matrix.os, 'macos')
        # Import Apple API key for app notarization on macOS
        run: |
          mkdir -p ~/private_keys/
          echo '${{ secrets.api_key }}' > ~/private_keys/AuthKey_${{ secrets.api_key_id }}.p8
          xcrun --find notarytool

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}

          # macOS certificate files
          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_psw }}

        env:
          # macOS notarization API key
          APPLE_ID: ${{ secrets.apple_id }}
          APPLE_ID_PASSWORD: ${{ secrets.apple_id_password }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.apple_id_password }}
          APPLE_TEAM_ID: 8D66VDADVH
          DEBUG: electron-notarize*

      - name: Archive notorization logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: notorization-logs
          path: notarization-error.log
          if-no-files-found: ignore
  update-release-notes:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up GitHub CLI
        uses: cli/cli@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Release Notes between Tags
        id: generate_notes
        run: |
          # Get the tag being pushed (e.g., v1.0.0)
          TAG=${GITHUB_REF#refs/tags/}

          # Find the previous tag, ensuring it exists (exclude the current tag)
          PREV_TAG=$(git tag --sort=v:refname | grep -B 1 "$TAG" | head -n 1)

          # If PREV_TAG is the same as the current tag, adjust
          if [ "$PREV_TAG" == "$TAG" ]; then
            PREV_TAG=$(git tag --sort=v:refname | grep -B 2 "$TAG" | head -n 1)
          fi

          if [ -z "$PREV_TAG" ]; then
            echo "Error: Previous tag not found."
            exit 1
          fi

          # Generate the release notes using GitHub API
          NOTES=$(gh api repos/NethServer/nethlink/releases/generate-notes \
            -f tag_name="$TAG" -f previous_tag_name="$PREV_TAG" -q .body \
            )

          # Save the release notes to an output variable
          echo "::set-output name=release_notes::$NOTES"

      - name: Update Release Notes in GitHub
        run: |
          # Get the tag being pushed
          TAG=${GITHUB_REF#refs/tags/}

          # Update the release with the generated notes
          gh release edit $TAG --notes "${{ steps.generate_notes.outputs.release_notes }}" 